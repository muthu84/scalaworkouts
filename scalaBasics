package com.inceptez.learnscala
import scala.collection.mutable.Map

object scalaBasics {


	def greater(a:Int,b:Int,c:Int)={

		if (a>c && a>b){

			println("A is greater" + a)

		} else {

			if (b>c){

				println("B is greater" + b)

			}else {

				println ("C is greater" + c)
			}


		}


	}

	def coursefee(course:Array[String])={

		for (i <- 0 to course.length-1){

			if (course(i) == "bigdata")
			{
				println("FEES FOR bigdata 10000")

			}else {

				if (course(i)=="spark")

				{
					println("FEES FOR spark 20000")

				}
				else {

					if (course(i) == "datas")
					{

						println("FEES FOR datascience 30000")
					}

				}


			}



		}


	}

	def coursefee(course:Map[String,Int],modifyFee:Map[String,Int])={

		for (i<-course.keys){

			for (j <- modifyFee.keys)
			{

				if (i == j){

					course(i) = modifyFee(j)
							println ("COURSE FEE" + course(i))
				}      


			}

		}
	}


	def coursefee(course:Map[String,Int])={

		for (i<-course.keys){


			if (i=="bigdata"){

				println("big data FEE" + course(i))
				course(i)=120000
				println("big data FEE" + course(i))

			}else {

				if (i=="spark") {

					println("spark FEE" + course(i))

				}else{

					if (i=="datas") {

						println("Data Science FEE" + course(i))

					}

				}
			}



		}

	}

	def findval(x:Any)={
		var y=100
				val z = 50
				println ("STR" + " " +  z.toString() )

				if (x.isInstanceOf[Int]== true){

					println ("the passed value is int")
					y = y + x.asInstanceOf[Int]

							println("Y VALUE" + y);
				}
				else {

					if (x.isInstanceOf[String]==true){


						println("the passed value is string")

					}

				}


	}
	var muthu=Range(1,10);

	def findnumber()={

		var eve = muthu.filter { _%2==0 }

		println("short even num" + " " +  eve)
		var odd = muthu.filter { _%2 !=0}
		println("short odd num" + " " + odd)
	}

	

	def findnumber (x:Range)={


		for (i<-0 to x.length by 2){

			println ("Even Numbers" + i)

		}

		for (i<- 1 to x.length by 2){

			println ("Odd Numbers" + i)
		}

		var y = x.slice(5, 20)
				println(y.length)


				for (i<- y) {

					var xx = i % 2
							if (xx==0){

								println ("Even numbers" + i)
							}
							else{

								println ("Odd Numbers" + i)

							}
				}

	}
	var x3p = Range(0,21)
			def hopby3()={

		for (i<- x3p by 3)
		{

			println ("print numbers hop by 3" + " " + i)
		}
	}
	
	def palin(mystr:String)={

		var revstr = mystr.reverse
				var charst = ""
				var chararr =  mystr.toCharArray()
				print (chararr.length)
				var i = chararr.length-1

				while(i >= 0){

					charst = charst + chararr(i)
							i-=1
				}
		/*  for (i<-  chararr.length-1 to 0 by -1)
    {

      println(chararr(i))
      charst = charst + chararr(i)
      println (charst)


    }*/
		
		println ("charst"+charst)
		if (mystr==charst){

			println ("the string is palindrom")

		}
		else{

			println("the string is not palindrom")
		}

		if (revstr==mystr)
		{
			println("the string is palindrome using reverse function");
		}

		else{

			println("the string is not palindrome using reverse func");
		}

	}
	def main(args:Array[String])={


		greater(1,3,2)
		coursefee(Array("spark","bigdata","spark"))
		coursefee(Map("bigdata"->90000,"spark"->20000,"datas"->30000),Map("bigdata"->8999,"spark"->9000))
		coursefee(Map("bigdata"->90000,"spark"->20000,"datas"->30000))
		palin("madam")
		findval(10)
		findnumber(Range(1,30))
		findnumber()
		hopby3()
	
		
	
		

	}


}
